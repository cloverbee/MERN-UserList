{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\xenia\\\\Desktop\\\\JScode\\\\1stproject\\\\fullstackexamplemodifying\\\\react\\\\src\\\\Components\\\\formdemo.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\"; //import \"./index.css\";\n\nimport { Form, Input, Tooltip, Icon, Button } from \"antd\";\nexport default class RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log(\"Received values of form: \", values);\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue(\"password\")) {\n        callback(\"Two passwords that you enter is inconsistent!\");\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields([\"confirm\"], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator; //const { autoCompleteResult } = this.state;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 6\n        },\n        sm: {\n          span: 3\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 6\n        },\n        sm: {\n          span: 7\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 2,\n          offset: 0\n        },\n        sm: {\n          span: 2,\n          offset: 9\n        }\n      }\n    };\n    return React.createElement(Form, Object.assign({\n      style: {\n        margin: 10\n      }\n    }, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      style: {\n        margin: 10\n      },\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"First Name\\xA0\", React.createElement(Tooltip, {\n        title: \"What do you want others to call you?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"question-circle-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, getFieldDecorator(\"First Name\", {\n      rules: [{\n        required: true,\n        message: \"Please input your First Name!\",\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Last Name\\xA0\", React.createElement(Tooltip, {\n        title: \"What is your last name?\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"question-circle-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, getFieldDecorator(\"Last Name\", {\n      rules: [{\n        required: true,\n        message: \"Please input your Last Name!\",\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Sex\\xA0\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, getFieldDecorator(\"Sex\", {\n      rules: [{\n        required: true,\n        message: \"Please input your Sex!\",\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Age\\xA0\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, getFieldDecorator(\"Age\", {\n      rules: [{\n        required: true,\n        message: \"Please input your Age!\",\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, getFieldDecorator(\"password\", {\n      rules: [{\n        required: true,\n        message: \"Please input your password!\"\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, getFieldDecorator(\"confirm\", {\n      rules: [{\n        required: true,\n        message: \"Please confirm your password!\"\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"submit\")));\n  }\n\n}\n/*\r\nconst WrappedRegistrationForm = Form.create({ name: \"register\" })(\r\n  RegistrationForm\r\n);\r\n\r\nReactDOM.render(\r\n  <WrappedRegistrationForm />,\r\n  document.getElementById(\"container\")\r\n);*/","map":{"version":3,"sources":["C:\\Users\\xenia\\Desktop\\JScode\\1stproject\\fullstackexamplemodifying\\react\\src\\Components\\formdemo.js"],"names":["React","ReactDOM","Form","Input","Tooltip","Icon","Button","RegistrationForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","margin","rules","required","message","whitespace","validator"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"antd/dist/antd.css\";\r\n//import \"./index.css\";\r\nimport { Form, Input, Tooltip, Icon, Button } from \"antd\";\r\n\r\nexport default class RegistrationForm extends React.Component {\r\n  state = {\r\n    confirmDirty: false,\r\n    autoCompleteResult: []\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        console.log(\"Received values of form: \", values);\r\n      }\r\n    });\r\n  };\r\n\r\n  handleConfirmBlur = e => {\r\n    const value = e.target.value;\r\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n  };\r\n\r\n  compareToFirstPassword = (rule, value, callback) => {\r\n    const form = this.props.form;\r\n    if (value && value !== form.getFieldValue(\"password\")) {\r\n      callback(\"Two passwords that you enter is inconsistent!\");\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    const form = this.props.form;\r\n    if (value && this.state.confirmDirty) {\r\n      form.validateFields([\"confirm\"], { force: true });\r\n    }\r\n    callback();\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    //const { autoCompleteResult } = this.state;\r\n\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 6 },\r\n        sm: { span: 3 }\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 6 },\r\n        sm: { span: 7 }\r\n      }\r\n    };\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 2,\r\n          offset: 0\r\n        },\r\n        sm: {\r\n          span: 2,\r\n          offset: 9\r\n        }\r\n      }\r\n    };\r\n\r\n    return (\r\n      <Form style = {{margin: 10}} {...formItemLayout} onSubmit={this.handleSubmit}>\r\n        <Form.Item style = {{margin: 10}}\r\n          label={\r\n            <span>\r\n              First Name&nbsp;\r\n              <Tooltip title=\"What do you want others to call you?\">\r\n                <Icon type=\"question-circle-o\" />\r\n              </Tooltip>\r\n            </span>\r\n            \r\n          }\r\n        >\r\n          {getFieldDecorator(\"First Name\", {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: \"Please input your First Name!\",\r\n                whitespace: true\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label={\r\n            <span>\r\n              Last Name&nbsp;\r\n              <Tooltip title=\"What is your last name?\">\r\n                <Icon type=\"question-circle-o\" />\r\n              </Tooltip>\r\n            </span>\r\n          }\r\n        >\r\n          {getFieldDecorator(\"Last Name\", {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: \"Please input your Last Name!\",\r\n                whitespace: true\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n\r\n        <Form.Item label={<span>Sex&nbsp;</span>}>\r\n          {getFieldDecorator(\"Sex\", {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: \"Please input your Sex!\",\r\n                whitespace: true\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n\r\n        <Form.Item label={<span>Age&nbsp;</span>}>\r\n          {getFieldDecorator(\"Age\", {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: \"Please input your Age!\",\r\n                whitespace: true\r\n              }\r\n            ]\r\n          })(<Input />)}\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Password\" hasFeedback>\r\n          {getFieldDecorator(\"password\", {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: \"Please input your password!\"\r\n              },\r\n              {\r\n                validator: this.validateToNextPassword\r\n              }\r\n            ]\r\n          })(<Input.Password />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Confirm Password\" hasFeedback>\r\n          {getFieldDecorator(\"confirm\", {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: \"Please confirm your password!\"\r\n              },\r\n              {\r\n                validator: this.compareToFirstPassword\r\n              }\r\n            ]\r\n          })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n        </Form.Item>\r\n\r\n        <Form.Item {...tailFormItemLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n/*\r\nconst WrappedRegistrationForm = Form.create({ name: \"register\" })(\r\n  RegistrationForm\r\n);\r\n\r\nReactDOM.render(\r\n  <WrappedRegistrationForm />,\r\n  document.getElementById(\"container\")\r\n);*/\r\n"]},"metadata":{},"sourceType":"module"}